name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Ensure the project directory exists
            mkdir -p /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}

            # Change ownership of the project directory
            sudo chown -R ${{ secrets.VPS_USERNAME }}:$${{ secrets.VPS_USERNAME }} /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}

            # Navigate to the project directory
            cd /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}

            # Check if the directory is a git repository
            if [ ! -d ".git" ]; then
              # Clone the repository if it's not already a git repository
              git clone https://${{ secrets.GH_PAT }}@github.com/nakhoacool/WebQA.git .
            else
              # Pull the latest changes from the repository
              git pull origin main
            fi

            # Save the .env file
            echo "${{ secrets.ENV_CONTENTS }}" > /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}/client/.env

            # Decode and save the keys archive
            echo "${{ secrets.KEYS_ARCHIVE }}" | base64 -d > /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}/core/keys.tar.gz

            # Extract the keys archive
            tar -xzf /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}/core/keys.tar.gz -C /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}/core

            # Remove the keys archive
            rm /home/${{ secrets.VPS_USERNAME }}/${{ vars.DIR_NAME }}/core/keys.tar.gz

            # Stop and remove existing containers
            docker compose down

            # Build and start the containers
            docker compose up --build -d

            # Remove unused Docker images (those without any tags)
            docker image prune --filter "dangling=true" -f
